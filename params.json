{"body":"OBJ-MySQL\r\n=========\r\n\r\nOBJ MySQL is a simple MySQL Abstraction Layer for PHP>5.2 that provides a simple and _secure_ interaction with your database using mysqli_* functions at its core.\r\n\r\nOBJ-MySQL is perfect for small scale applications such as cron jobs, facebook canvas campaigns or micro frameworks or sites.\r\n\r\n_This project is under construction, any feedback would be appreciated_\r\n\r\nAuthor: [Jonathan Tavares](https://github.com/entomb)\r\n\r\n**checkout the [changelog](https://github.com/entomb/OBJ-MySQL/wiki/changelog) for info on the lattest changes**\r\n\r\n\r\n\r\n##Get OBJ_MySQL\r\nYou can download it from here, or require it using [composer](https://packagist.org/packages/entomb/obj_mysql).\r\n```json\r\n{\r\n    \"require\": {\r\n\t\t\"entomb/obj_mysql\": \"dev-master\"\r\n\t}\r\n}\r\n```\r\n\r\nOr you can require it by cloning this repo\r\n\r\n```bash\r\n$ git clone https://github.com/entomb/OBJ-MySQL.git\r\n```\r\n\r\nif you are already using GIT on you project you can add it as a submodule\r\n\r\n```bash\r\n$ git submodule add https://github.com/entomb/OBJ-MySQL.git libs/db\r\n```\r\n\r\n\r\n##Starting the driver\r\nTo start the db driver you must include the main class file and pass the '$config' array described bellow. \r\nyou can have multiple isntances of the Class each one with its own $config (one for Reads and one for Writes for example).\r\n\r\n```php\r\n    //include de main OBJ_mysql class file\r\n    include(\"bin/OBJ_mysql.php\");\r\n    \r\n    //configuration array \r\n    $config = array();\r\n    $config[\"hostname\"]  = \"YOUR_HOST\";\r\n    $config[\"database\"]  = \"YOUR_DATABASE_NAME\";\r\n    $config[\"username\"]  = \"USER_NAME\";\r\n    $config[\"password\"]  = \"PASSWORD\";\r\n    \r\n    //other configurations\r\n    $config[\"port\"]      = \"PORT\"; //defaults to 3306\r\n    $config[\"charset\"]    = \"CHARSET\"; //defaults to UTF-8\r\n    $config[\"exit_on_error\"] = \"TRUE|FALSE\"; //defaults to true\r\n    \r\n    //class instantiation\r\n    $db = new OBJ_mysql($config);\r\n    \r\n```\r\n\r\n\r\n \r\n##Using OBJ_MySQL\r\n\r\nthere are numerous ways of using this library, here are some examples of the most common methods\r\n\r\n###Selecting and retrieving data from a table\r\n\r\n```php\r\n  $Result = $db->query(\"SELECT * FROM users\");\r\n  $Users  = $Result->fetchALL();\r\n```\r\n\r\n###Inserting data on a table\r\n\r\nto manipulate tables you have the most important methods wrapped, \r\nthey all work the same way: parsing arrays of key/value pairs and forming a safe query\r\n\r\nthe methods are:\r\n```php\r\n  $db->insert( String $Table, Array $Data); //generates an INSERT query\r\n  $db->replace(String $Table, Array $Data); //generates an INSERT OR UPDATE query\r\n  $db->update( String $Table, Array $Data, Array $Where); //generates an UPDATE query\r\n  $db->delete( String $Table, Array $Where); //generates a DELETE query\r\n```\r\n\r\nAll methods will return the resulting `mysqli_insert_id()` or true/false depending on context. \r\nThe correct approach if to allways check if they executed as success is allways returned\r\n\r\n```php\r\n  $ok = $db->delete('users', array( 'user_id' => 9 ) );\r\n  if($ok){\r\n    echo \"user deleted!\";\r\n  }else{\r\n    echo \"can't delete user!\";\r\n  }\r\n```\r\n\r\n**note**: all parameter values are sanitized before execution, you dont have to escape values beforehand.\r\n\r\n```php\r\n  $new_user_id = $db->insert('users', array(\r\n                                'name'  => \"jothn\",\r\n                                'email' => \"johnsmith@email.com\",\r\n                                'group' => 1,\r\n                                'active' => true,\r\n                              )\r\n                          );\r\n  if($new_user_id){\r\n    echo \"new user inserted with the id $new_user_id\";\r\n  }\r\n```\r\n \r\n\r\n###binding parameters on queries\r\n\r\nBinding parameters is a good way of preventing mysql insjections as the parameters are sanitized before execution.\r\n\r\n```php\r\n  $Result = $db->query(\"SELECT * FROM users WHERE id_user = ? AND active = ? LIMIT 1\",array(11,1));\r\n  if($Result){\r\n    $User = $Result->fetchArray();\r\n    print_r($User);\r\n  }else{\r\n    echo \"user not found\";\r\n  }\r\n```\r\n\r\n###Using the OBJ_mysql_result Class\r\n\r\nAfter executing a `SELECT` query you receive a `OBJ_mysql_result` object that will help you manipulate the resultant data.\r\nthere are diferent ways of accesing this data, check the examples bellow:\r\n\r\n####Fetching all data\r\n```php\r\n  $Result = $db->query(\"SELECT * FROM users\");\r\n  $AllUsers = $Result->fetchAll();\r\n```\r\nFetching all data works as `Object` or `Array` the `fetchAll()` method will return the default based on the `$_default_result_type` config.\r\nOther methods are:\r\n\r\n```php\r\n$Row = $Result->fetch();        // Fetch a single result row as defined by the config (Array or Object)\r\n$Row = $Result->fetchArray();   // Fetch a single result row as Array\r\n$Row = $Result->fetchObject();  // Fetch a single result row as Object\r\n\r\n$Data = $Result->fetchAll();        // Fetch all result data as defined by the config (Array or Object)\r\n$Data = $Result->fetchAllArray();   // Fetch all result data as Array\r\n$Data = $Result->fetchAllObject();  // Fetch all result data as Object\r\n\r\n$Data = $Result->fetchColumn(String $Column);           // Fetch a single column in a 1 dimention Array\r\n$Data = $Result->fetchColumn(String $key, String $Value);  // Fetch data as a key/value pair Array.\r\n\r\n```\r\n####Aliases\r\n```php\r\n  $db->get()                  // Alias for $db->fetch(); \r\n  $db->getAll()               // Alias for $db->fetchAll(); \r\n  $db->getObject()            // Alias for $db->fetchAllObject(); \r\n  $db->getArray()             // Alias for $db->fetchAllArray(); \r\n  $db->getColumn($key)        // Alias for $db->fetchColumn($key); \r\n```\r\n\r\n####Iterations\r\nTo iterate a resultset you can use any fetch() method listed above\r\n\r\n```php\r\n  $Result = $db->query(\"SELECT * FROM users\");\r\n  \r\n  //using while\r\n  while( $row = $Result->fetch() ){\r\n    echo $row->name;\r\n    echo $row->email;\r\n  }\r\n  \r\n  //using foreach\r\n  foreach( $Result->fetchAll() as $row ){\r\n    echo $row->name;\r\n    echo $row->email;\r\n  }\r\n  \r\n```\r\n\r\n####Logging and Errors\r\n\r\nShowing the query log. the log comes with the SQL executed, the execution time and the result row count (if any)\r\n```php\r\n\r\n  print_r($db->log());\r\n  \r\n```\r\n\r\nto debug mysql errors:\r\n\r\nuse `$db->errors()` to fetch all errors (returns false if no errors) or `$db->lastError()` for information on the last error.\r\n\r\n```php\r\n  if( $db->errors() ){\r\n      echo $db->lastError();\r\n  }\r\n```\r\n\r\n\r\n \r\n\r\n","name":"Obj-mysql","tagline":"Simple MySQL Abstraction Layer and mysqli_ result wrapper","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}